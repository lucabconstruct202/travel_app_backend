datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  passwordHash String
  createdAt    DateTime   @default(now())
  programs     Program[]
  elements     Element[]
  ratings      Rating[] 
  notes        Note[] 
}

model Program {
  id        String   @id @default(uuid())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  groups    Group[]
  createdAt DateTime @default(now())
}

model Group {
  id        String   @id @default(uuid())
  name      String
  position  Int?
  program   Program  @relation(fields: [programId], references: [id])
  programId String
  createdAt DateTime @default(now())
  elements  GroupElement[]
}

model Element {
  id          String   @id @default(uuid())
  name        String
  description String?

  category    String?

  street      String?
  city        String?
  country     String?
  location    String?      // z.â€¯B. formattierte Adresse

  lat         Float?
  lng         Float?

  visited     Boolean  @default(false)
  visitDate   DateTime?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  userId      String

  ratings     Rating[]
  notes       Note[]
  photos      Photo[]
  tags        ElementTag[]
  groups      GroupElement[]
}

model GroupElement {
  group     Group   @relation(fields: [groupId], references: [id])
  groupId   String
  element   Element @relation(fields: [elementId], references: [id])
  elementId String

  @@id([groupId, elementId])
}

model Rating {
  id        String   @id @default(uuid())
  rating    Int      @default(0)
  element   Element  @relation(fields: [elementId], references: [id])
  elementId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Note {
  id        String   @id @default(uuid())
  content   String
  element   Element  @relation(fields: [elementId], references: [id])
  elementId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Photo {
  id        String   @id @default(uuid())
  fileUrl   String
  element   Element  @relation(fields: [elementId], references: [id])
  elementId String
  createdAt DateTime @default(now())
}

model Tag {
  id    String       @id @default(uuid())
  name  String       @unique
  elements ElementTag[]
}

model ElementTag {
  element   Element @relation(fields: [elementId], references: [id])
  elementId String
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String

  @@id([elementId, tagId])
}
