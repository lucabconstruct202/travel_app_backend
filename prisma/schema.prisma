datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String     @id @default(uuid())
  firstName    String
  lastName     String
  email        String     @unique
  passwordHash String
  createdAt    DateTime   @default(now())
  programs     Program[]
  elements     Element[]
  ratings      Rating[] 
  notes        Note[]
  groups       Group[] 
}

model Program {
  id           String             @id @default(uuid())
  title        String
  description  String?
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime           @default(now())
  user         User               @relation(fields: [userId], references: [id])
  userId       String

  timeranges   ProgramTimerange[]
}

model Group {
  id           String             @id @default(uuid())
  title        String
  description  String?
  createdAt    DateTime           @default(now())
  user         User               @relation(fields: [userId], references: [id])
  userId       String

  elements     GroupElement[]
  timeranges   ProgramTimerangeGroup[]
}

model ProgramTimerange {
  id           String                   @id @default(uuid())
  startDate    DateTime
  endDate      DateTime
  program      Program                  @relation(fields: [programId], references: [id])
  programId    String

  groups       ProgramTimerangeGroup[]
}

model ProgramTimerangeGroup {
  id               String             @id @default(uuid())
  timerange        ProgramTimerange  @relation(fields: [timerangeId], references: [id])
  timerangeId      String
  group            Group             @relation(fields: [groupId], references: [id])
  groupId          String

  @@unique([timerangeId, groupId])
}

model Element {
  id          String   @id @default(uuid())
  name        String
  description String?

  category    String?
  googleMapId String?
  street      String?
  city        String?
  country     String?
  location    String?      // z. B. formattierte Adresse

  lat         Float?
  lng         Float?

  visited     Boolean  @default(false)
  visitDate   DateTime?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  userId      String

  ratings     Rating[] 
  notes       Note[] 
  photos      Photo[] 
  tags        ElementTag[] 
  groups      GroupElement[]
}

model GroupElement {
  group     Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  element   Element @relation(fields: [elementId], references: [id], onDelete: Cascade)
  elementId String

  @@id([groupId, elementId])
}


model Note {
  id        String   @id @default(uuid())
  content   String
  element   Element  @relation(fields: [elementId], references: [id], onDelete: Cascade) // <—
  elementId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Rating {
  id        String   @id @default(uuid())
  rating    Int      @default(0)
  element   Element  @relation(fields: [elementId], references: [id], onDelete: Cascade)
  googleMapId String?
  elementId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}



model Photo {
  id        String   @id @default(uuid())
  fileUrl   String
  element   Element  @relation(fields: [elementId], references: [id], onDelete: Cascade) // <—
  elementId String
  createdAt DateTime @default(now())
}


model Tag {
  id    String       @id @default(uuid())
  name  String       @unique
  elements ElementTag[]
}

model ElementTag {
  element   Element @relation(fields: [elementId], references: [id], onDelete: Cascade) // <—
  elementId String
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String

  @@id([elementId, tagId])
}

